/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/assets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all assets */
        get: {
            parameters: {
                query?: {
                    type?: components["schemas"]["AssetType"];
                    status?: components["schemas"]["AssetStatus"];
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of assets */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AssetListItem"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/assets/archived": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List archived assets
         * @description Returns all archived assets across all asset types with archive metadata, with server-side pagination and filtering
         */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by asset type (optional) */
                    type?: components["schemas"]["AssetType"];
                    /** @description Page number */
                    page?: number;
                    /** @description Number of items per page */
                    pageSize?: number;
                    /** @description Search term to filter assets by name, ID, or archive reason */
                    search?: string;
                    /** @description Field to sort by */
                    sortBy?: "name" | "type" | "createdTime" | "lastUpdatedTime" | "lastExportTime" | "archivedDate" | "archiveReason" | "archivedBy" | "lastActivity";
                    /** @description Sort order */
                    sortOrder?: "asc" | "desc";
                    /** @description Filter by archive date range */
                    dateRange?: "all" | "24h" | "7d" | "30d" | "90d";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Paginated list of archived assets */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            data: {
                                items: components["schemas"]["ArchivedAssetItem"][];
                                nextToken?: string | null;
                                totalCount: number;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/folders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List folders */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of folders */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FolderListItem"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/folders/{folderId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get folder details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    folderId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Folder details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FolderDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/folders/{folderId}/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get folder members */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    folderId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Folder members */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FolderMember"][];
                    };
                };
            };
        };
        put?: never;
        /** Add member to folder */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    folderId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        memberId: string;
                        /** @enum {string} */
                        memberType: "DASHBOARD" | "ANALYSIS" | "DATASET" | "DATASOURCE" | "USER" | "GROUP";
                        /**
                         * @description Required for USER and GROUP member types
                         * @enum {string}
                         */
                        role?: "ADMIN" | "AUTHOR" | "VIEWER";
                    };
                };
            };
            responses: {
                /** @description Member added successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/folders/{folderId}/members/{memberId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove member from folder
         * @description Removes an asset (dashboard, analysis, dataset, datasource) from a folder
         */
        delete: {
            parameters: {
                query: {
                    /** @description The type of asset to remove from the folder */
                    type: "DASHBOARD" | "ANALYSIS" | "DATASET" | "DATASOURCE";
                };
                header?: never;
                path: {
                    folderId: string;
                    memberId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Member removed successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            data?: {
                                message?: string;
                            };
                        };
                    };
                };
                /** @description Bad request - missing required parameters */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["Unauthorized"];
                500: components["responses"]["InternalServerError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dashboards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List dashboards */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of dashboards */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DashboardListItem"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datasets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List datasets */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of datasets */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DatasetListItem"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/assets/{assetType}/paginated": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get paginated assets by type
         * @description Returns paginated list of assets for a specific type
         */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    pageSize?: number;
                    search?: string;
                    sortBy?: string;
                    sortOrder?: "asc" | "desc" | "ASC" | "DESC";
                    filters?: string;
                };
                header?: never;
                path: {
                    assetType: "dashboards" | "datasets" | "analyses" | "datasources" | "folders" | "users" | "groups";
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Paginated asset list */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PaginatedAssetResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List users */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of users */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserListItem"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/lineage/{assetType}/{assetId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get asset lineage */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    assetType: components["schemas"]["AssetType"];
                    assetId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Asset lineage */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AssetLineage"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/assets/{assetType}/{assetId}/cached": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get cached asset data from S3
         * @description Retrieves the full exported asset data from S3 storage
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    assetType: "dashboard" | "analysis" | "dataset" | "datasource" | "folder" | "user" | "group";
                    assetId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Cached asset data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            /** @description Full asset data from S3 */
                            data?: Record<string, never>;
                        };
                    };
                };
                /** @description Asset not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/assets/{assetType}/{assetId}/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update asset tags */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    assetType: components["schemas"]["AssetType"];
                    assetId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        tags: {
                            Key: string;
                            Value: string;
                        }[];
                    };
                };
            };
            responses: {
                /** @description Tags updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/fields": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search fields */
        get: {
            parameters: {
                query?: {
                    query?: string;
                    assetType?: components["schemas"]["AssetType"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Field search results */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FieldInfo"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/export/jobs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List export jobs
         * @description Returns a list of recent export jobs with their status
         */
        get: {
            parameters: {
                query?: {
                    limit?: number;
                    status?: "queued" | "processing" | "completed" | "failed" | "stopped";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of export jobs */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ExportJobList"];
                    };
                };
                401: components["responses"]["Unauthorized"];
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/export/jobs/{jobId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get export job status
         * @description Returns the current status and progress of an export job
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    jobId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Export job status */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ExportJobStatus"];
                    };
                };
                401: components["responses"]["Unauthorized"];
                /** @description Job not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/export/jobs/{jobId}/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get export job logs
         * @description Returns detailed logs for a completed export job
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    jobId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Export job logs */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ExportJobLogs"];
                    };
                };
                401: components["responses"]["Unauthorized"];
                /** @description Job not found or logs not available */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/export/jobs/{jobId}/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stop an export job
         * @description Request to stop a running export job at the next checkpoint
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    jobId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Stop request sent successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            data?: {
                                jobId?: string;
                                status?: components["schemas"]["JobStatus"];
                                message?: string;
                            };
                        };
                    };
                };
                401: components["responses"]["Unauthorized"];
                /** @description Job not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/export/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get export summary statistics
         * @description Returns overall export statistics without detailed progress
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Export summary */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ExportSummaryResponse"];
                    };
                };
                401: components["responses"]["Unauthorized"];
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Start a new export job
         * @description Queues an export job and returns immediately with job ID
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ExportJobRequest"];
                };
            };
            responses: {
                /** @description Export job queued successfully */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ExportJobResponse"];
                    };
                };
                401: components["responses"]["Unauthorized"];
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/export/{assetType}/{assetId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get full export data for asset */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    assetType: components["schemas"]["AssetType"];
                    assetId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Full asset export data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ingestions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get cached ingestions
         * @description Returns cached ingestion data for all SPICE datasets
         */
        get: {
            parameters: {
                query?: {
                    search?: string;
                    sortBy?: "createdTime" | "status" | "datasetName" | "ingestionTimeInSeconds" | "rowsIngested";
                    sortOrder?: "asc" | "desc";
                    page?: number;
                    pageSize?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of ingestions with metadata */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["IngestionListResponse"];
                    };
                };
                401: components["responses"]["Unauthorized"];
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ingestions/{datasetId}/{ingestionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get ingestion details
         * @description Returns detailed information about a specific ingestion
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    datasetId: string;
                    ingestionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ingestion details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Ingestion"];
                    };
                };
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        /**
         * Cancel an ingestion
         * @description Cancels a running ingestion
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    datasetId: string;
                    ingestionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ingestion cancelled successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            message?: string;
                        };
                    };
                };
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/activity/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh activity data for specified asset types
         * @description Fetches latest activity data from CloudTrail for dashboards, analyses, and users
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Asset types to refresh activity for */
                        assetTypes: ("dashboard" | "analysis" | "user" | "all")[];
                        /**
                         * @description Number of days of activity to fetch
                         * @default 90
                         */
                        days?: number;
                    };
                };
            };
            responses: {
                /** @description Activity refresh initiated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            message?: string;
                            refreshed?: {
                                dashboards?: number;
                                analyses?: number;
                                users?: number;
                            };
                        };
                    };
                };
                401: components["responses"]["Unauthorized"];
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/activity/{assetType}/{assetId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get activity data for a specific asset */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    assetType: "dashboard" | "analysis" | "user";
                    assetId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Activity data for the asset */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ActivityData"];
                    };
                };
                401: components["responses"]["Unauthorized"];
                /** @description Asset not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/scripts/demo-cleanup/preview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Preview demo assets that would be deleted
         * @description Returns a list of all QuickSight demo assets that would be deleted without actually deleting them
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of demo assets to be deleted */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            data?: {
                                datasources?: {
                                    id?: string;
                                    name?: string;
                                    bucket?: string;
                                }[];
                                datasets?: {
                                    id?: string;
                                    name?: string;
                                    datasourceIds?: string[];
                                }[];
                                analyses?: {
                                    id?: string;
                                    name?: string;
                                }[];
                                totalCount?: number;
                            };
                        };
                    };
                };
                401: components["responses"]["Unauthorized"];
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/scripts/demo-cleanup/execute": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete all QuickSight demo assets
         * @description Deletes all demo datasources, datasets, and analyses, then archives them
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Demo cleanup completed successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            data?: {
                                deleted?: {
                                    datasources?: number;
                                    datasets?: number;
                                    analyses?: number;
                                    total?: number;
                                };
                                archived?: {
                                    datasources?: number;
                                    datasets?: number;
                                    analyses?: number;
                                    total?: number;
                                };
                                errors?: {
                                    assetType?: string;
                                    assetId?: string;
                                    error?: string;
                                }[];
                            };
                        };
                    };
                };
                401: components["responses"]["Unauthorized"];
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/activity/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get activity summary across all asset types */
        get: {
            parameters: {
                query?: {
                    days?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Activity summary */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            dashboards?: {
                                totalViews?: number;
                                uniqueViewers?: number;
                                activeAssets?: number;
                            };
                            analyses?: {
                                totalViews?: number;
                                uniqueViewers?: number;
                                activeAssets?: number;
                            };
                            users?: {
                                activeUsers?: number;
                                totalActivities?: number;
                            };
                        };
                    };
                };
                401: components["responses"]["Unauthorized"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data-catalog/full": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get full data catalog
         * @description Returns complete field catalog with pagination, filtering, and summary statistics
         */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    pageSize?: number;
                    viewMode?: "all" | "fields" | "calculated";
                    tagKey?: string;
                    tagValue?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Data catalog with fields and summary */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            data?: components["schemas"]["DataCatalogResponse"];
                        };
                    };
                };
                401: components["responses"]["Unauthorized"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data-catalog/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get available tags
         * @description Returns all available tags across assets with usage counts
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Available tags with counts */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            data?: components["schemas"]["TagWithCount"][];
                        };
                    };
                };
                401: components["responses"]["Unauthorized"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data-catalog/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get catalog statistics
         * @description Returns high-level statistics about the data catalog
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Catalog statistics */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            data?: components["schemas"]["CatalogStats"];
                        };
                    };
                };
                401: components["responses"]["Unauthorized"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data-catalog/visual-fields": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get visual field mappings
         * @description Returns field usage in visuals across dashboards and analyses
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Visual field mappings */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            data?: components["schemas"]["VisualFieldCatalogResponse"];
                        };
                    };
                };
                401: components["responses"]["Unauthorized"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/groups/{groupName}/assets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get assets accessible by a group
         * @description Returns all assets that a group has access to through direct permissions or folder membership
         */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by asset type (optional) */
                    assetType?: components["schemas"]["AssetType"];
                };
                header?: never;
                path: {
                    /** @description The name of the group */
                    groupName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of accessible assets */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            data: {
                                groupName: string;
                                totalAssets: number;
                                assetsByType?: {
                                    dashboards?: number;
                                    datasets?: number;
                                    analyses?: number;
                                    datasources?: number;
                                    folders?: number;
                                };
                                assets: {
                                    assetId: string;
                                    assetType: components["schemas"]["AssetType"];
                                    assetName: string;
                                    arn?: string;
                                    /**
                                     * @description How the group has access to this asset
                                     * @enum {string}
                                     */
                                    accessType: "direct" | "folder_inherited";
                                    /** @description Folder path if access is inherited from folder */
                                    folderPath?: string;
                                    /** @description List of permissions the group has on this asset */
                                    permissions?: string[];
                                }[];
                            };
                        };
                    };
                };
                401: components["responses"]["Unauthorized"];
                /** @description Group not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @enum {string} */
        AssetType: "dashboard" | "analysis" | "dataset" | "datasource" | "folder" | "user" | "group";
        /** @enum {string} */
        AssetStatus: "active" | "archived" | "deleted";
        /** @enum {string} */
        EnrichmentStatus: "skeleton" | "enriched" | "partial" | "metadata-update";
        PaginatedAssetResponse: {
            success: boolean;
            data: {
                dashboards?: components["schemas"]["DashboardListItem"][];
                datasets?: components["schemas"]["DatasetListItem"][];
                analyses?: components["schemas"]["AnalysisListItem"][];
                datasources?: components["schemas"]["DatasourceListItem"][];
                folders?: components["schemas"]["FolderListItem"][];
                users?: components["schemas"]["UserListItem"][];
                groups?: components["schemas"]["GroupListItem"][];
                pagination?: components["schemas"]["PaginationInfo"];
                fromCache?: boolean;
            };
        };
        PaginationInfo: {
            page: number;
            pageSize: number;
            totalItems: number;
            totalPages: number;
            hasMore?: boolean;
        };
        AssetListItem: {
            /** @description Asset unique identifier */
            id: string;
            /** @description Asset display name */
            name: string;
            type: components["schemas"]["AssetType"];
            status: components["schemas"]["AssetStatus"];
            /**
             * Format: date-time
             * @description When asset was created in QuickSight
             */
            createdTime: string;
            /**
             * Format: date-time
             * @description When asset was last updated in QuickSight (QuickSight's lastModifiedTime)
             */
            lastUpdatedTime: string;
            /**
             * Format: date-time
             * @description When asset was last exported to our portal (our timestamp)
             */
            lastExportTime: string;
            enrichmentStatus: components["schemas"]["EnrichmentStatus"];
            /** @description Timestamps for when each enrichment step was completed */
            enrichmentTimestamps?: {
                /**
                 * Format: date-time
                 * @description When asset definition was enriched
                 */
                definition?: string;
                /**
                 * Format: date-time
                 * @description When permissions were enriched
                 */
                permissions?: string;
                /**
                 * Format: date-time
                 * @description When tags were enriched
                 */
                tags?: string;
                /**
                 * Format: date-time
                 * @description When lineage was enriched
                 */
                lineage?: string;
                /**
                 * Format: date-time
                 * @description When view stats were enriched
                 */
                views?: string;
            };
            /** @default [] */
            tags: components["schemas"]["Tag"][];
            /**
             * @description Asset permissions
             * @default []
             */
            permissions: components["schemas"]["Permission"][];
        };
        ArchivedAssetItem: components["schemas"]["AssetListItem"] & {
            /**
             * Format: date-time
             * @description When asset was archived
             */
            archivedDate: string;
            /** @description Reason for archiving the asset */
            archiveReason: string;
            /** @description User or system that archived the asset */
            archivedBy?: string;
            /**
             * Format: date-time
             * @description Last time the asset was viewed/accessed before archiving
             */
            lastActivity?: string | null;
        };
        FolderListItem: components["schemas"]["AssetListItem"] & {
            /**
             * @description Full folder path like /parent/child
             * @example /Marketing/Reports
             */
            path: string;
            /** @description Number of assets in folder */
            memberCount: number;
            /** @description Parent folder ID (if any) */
            parentId?: string;
        };
        FolderDetails: components["schemas"]["FolderListItem"] & {
            /** @description User who created the folder */
            createdBy?: string;
            /** @description Folder description */
            description?: string;
        };
        FolderMember: {
            /** @description Asset ID of the member */
            MemberId: string;
            /**
             * @description Type of asset
             * @enum {string}
             */
            MemberType: "DASHBOARD" | "ANALYSIS" | "DATASET" | "DATASOURCE";
            /** @description Display name of the asset */
            MemberName: string;
        };
        DashboardListItem: components["schemas"]["AssetListItem"] & {
            /**
             * @description Dashboard creation status
             * @example CREATION_SUCCESSFUL
             */
            dashboardStatus: string;
            /** @description Number of visuals in dashboard */
            visualCount: number;
            /** @description Number of sheets in dashboard */
            sheetCount: number;
            /** @description Number of datasets used */
            datasetCount: number;
            /** @description Published version number (if any) */
            publishedVersionNumber?: number;
            /** @description Dashboard activity summary */
            activity?: {
                totalViews?: number;
                uniqueViewers?: number;
                /** Format: date-time */
                lastViewed?: string | null;
            };
            /** @description Definition validation errors */
            definitionErrors?: {
                /** @description Error type (e.g., COLUMN_NOT_FOUND) */
                type?: string;
                /** @description Error message */
                message?: string;
                violatedEntities?: {
                    /** @description Path to the entity with the error */
                    path?: string;
                }[];
            }[];
        };
        AnalysisListItem: components["schemas"]["AssetListItem"] & {
            /** @description Number of sheets in the analysis */
            sheetCount: number;
            /** @description Total number of visuals across all sheets */
            visualCount: number;
            /** @description Number of datasets used */
            datasetCount: number;
            sourceEntity?: {
                sourceTemplate?: {
                    dataSetReferences?: Record<string, never>[];
                    arn?: string;
                };
            };
        };
        DatasetListItem: components["schemas"]["AssetListItem"] & {
            /**
             * @description How data is imported
             * @enum {string}
             */
            importMode: "SPICE" | "DIRECT_QUERY";
            /** @description Number of fields in dataset */
            fieldCount: number;
            /** @description Dataset size in bytes */
            sizeInBytes?: number;
            /** @description Type of data source (S3, FILE, ATHENA, etc.) */
            sourceType?: string;
            /** @description Whether dataset has refresh properties configured */
            hasRefreshProperties?: boolean;
            /** @description Number of refresh schedules configured */
            refreshScheduleCount?: number;
            /** @description List of refresh schedules for the dataset */
            refreshSchedules?: components["schemas"]["RefreshSchedule"][];
            /** @description Refresh configuration properties for the dataset */
            dataSetRefreshProperties?: Record<string, never>;
        };
        RefreshSchedule: {
            /** @description Unique identifier for the refresh schedule */
            scheduleId: string;
            scheduleFrequency: {
                /**
                 * @description Frequency of the refresh
                 * @enum {string}
                 */
                interval: "MINUTE15" | "MINUTE30" | "HOURLY" | "DAILY" | "WEEKLY" | "MONTHLY";
                refreshOnDay?: {
                    /**
                     * @description Day of the week for weekly schedules
                     * @enum {string}
                     */
                    dayOfWeek?: "SUNDAY" | "MONDAY" | "TUESDAY" | "WEDNESDAY" | "THURSDAY" | "FRIDAY" | "SATURDAY";
                    /** @description Day of the month for monthly schedules */
                    dayOfMonth?: string;
                };
                /** @description Time of day for the refresh (HH:MM format) */
                timeOfTheDay?: string;
                /** @description Timezone for the schedule */
                timezone?: string;
            };
            /**
             * Format: date-time
             * @description When the schedule starts
             */
            startAfterDateTime?: string;
            /**
             * @description Type of refresh to perform
             * @enum {string}
             */
            refreshType: "INCREMENTAL_REFRESH" | "FULL_REFRESH";
            /** @description ARN of the refresh schedule */
            arn: string;
        };
        DatasourceListItem: components["schemas"]["AssetListItem"] & {
            /** @description Type of datasource (e.g., ATHENA, REDSHIFT, S3) */
            type: string;
            /** @description Connection mode (DIRECT_QUERY or IMPORT) */
            connectionMode: string;
            /** @description Connection parameters */
            dataSourceParameters?: Record<string, never>;
            vpcConnectionProperties?: {
                vpcConnectionArn?: string;
            };
        };
        GroupListItem: components["schemas"]["AssetListItem"] & {
            /** @description Number of members in the group */
            memberCount: number;
            /** @description Group description */
            description?: string;
            /** @description Principal ID of the group */
            principalId?: string;
        };
        UserListItem: components["schemas"]["AssetListItem"] & {
            /**
             * Format: email
             * @description User email address
             */
            email: string;
            /**
             * @description User role in QuickSight
             * @example AUTHOR
             */
            role: string;
            /** @description Whether user is active */
            active: boolean;
            /** @description Number of groups user belongs to */
            groupCount: number;
            /**
             * @description List of group names user belongs to
             * @default []
             */
            groups: string[];
            /**
             * Format: date-time
             * @description Last time user was active
             */
            lastActivityTime?: string;
            /** @description Total number of user activities */
            activityCount?: number;
            /** @description User activity summary */
            activity?: {
                totalActivities?: number;
                /** Format: date-time */
                lastActive?: string | null;
                dashboardCount?: number;
                analysisCount?: number;
            };
        };
        AssetLineage: {
            assetId: string;
            assetType: components["schemas"]["AssetType"];
            assetName: string;
            /** @description Whether this asset is archived */
            isArchived?: boolean;
            relationships: components["schemas"]["LineageRelationship"][];
            metadata?: {
                /** @description Type of datasource (S3, ATHENA, etc.) */
                datasourceType?: string;
            };
        };
        LineageRelationship: {
            sourceAssetId: string;
            sourceAssetType: components["schemas"]["AssetType"];
            sourceAssetName: string;
            /** @description Whether the source asset is archived */
            sourceIsArchived?: boolean;
            targetAssetId: string;
            targetAssetType: components["schemas"]["AssetType"];
            targetAssetName: string;
            /** @description Whether the target asset is archived */
            targetIsArchived?: boolean;
            /** @enum {string} */
            relationshipType: "uses" | "used_by";
        };
        FieldInfo: {
            fieldId: string;
            fieldName: string;
            displayName?: string;
            /** @description Field data type */
            dataType: string;
            description?: string;
            /** @description Whether this is a calculated field */
            isCalculated: boolean;
            /** @description Calculation expression (if calculated field) */
            expression?: string;
            /** @enum {string} */
            sourceAssetType: "dataset" | "analysis" | "dashboard";
            sourceAssetId: string;
            sourceAssetName: string;
            datasetId?: string;
            datasetName?: string;
            /** @description Source column name */
            columnName?: string;
            /** @description Field IDs this calculated field depends on */
            dependencies?: string[];
            /** @description Total usage count */
            usageCount: number;
            /** @description Number of analyses using this field */
            analysisCount: number;
            /** @description Number of dashboards using this field */
            dashboardCount: number;
            /** Format: date-time */
            lastUpdated: string;
            /** @default [] */
            tags: components["schemas"]["Tag"][];
        };
        Tag: {
            /** @description Tag key */
            key: string;
            /** @description Tag value */
            value: string;
        };
        Permission: {
            /** @description Principal ARN or identifier */
            principal: string;
            /**
             * @description Type of principal
             * @enum {string}
             */
            principalType: "USER" | "GROUP" | "NAMESPACE" | "PUBLIC";
            /** @description List of allowed actions */
            actions: string[];
        };
        ActivityData: {
            /** @description Asset identifier */
            assetId: string;
            /** @description Asset name from cache */
            assetName?: string;
            /** @enum {string} */
            assetType: "dashboard" | "analysis";
            /** @description Total number of views in activity window */
            totalViews: number;
            /** @description Number of unique viewers */
            uniqueViewers: number;
            /**
             * Format: date-time
             * @description Most recent view timestamp (persisted forever)
             */
            lastViewed: string;
            /** @description View counts by date (YYYY-MM-DD) */
            viewsByDate: {
                [key: string]: number;
            };
            /** @description All viewers with their activity counts */
            viewers: {
                /** @description User name or ARN */
                userName: string;
                /** @description Number of views by this user */
                viewCount: number;
                /**
                 * Format: date-time
                 * @description Last time this user viewed the asset
                 */
                lastViewed: string;
                /** @description Groups the user belongs to */
                groups?: string[];
            }[];
        };
        UserActivity: {
            /** @description User name or ARN */
            userName: string;
            /**
             * Format: date-time
             * @description Last activity timestamp (persisted forever)
             */
            lastActive: string;
            /** @description Total number of activities in activity window */
            totalActivities: number;
            /** @description Activity counts by date (YYYY-MM-DD) */
            activitiesByDate: {
                [key: string]: number;
            };
            /** @description Dashboards viewed with activity counts */
            dashboards: {
                /** @description Dashboard ID */
                dashboardId: string;
                /** @description Dashboard name from cache */
                dashboardName?: string;
                /** @description Number of times viewed */
                viewCount: number;
                /**
                 * Format: date-time
                 * @description Last time viewed
                 */
                lastViewed: string;
            }[];
            /** @description Analyses viewed with activity counts */
            analyses: {
                /** @description Analysis ID */
                analysisId: string;
                /** @description Analysis name from cache */
                analysisName?: string;
                /** @description Number of times viewed */
                viewCount: number;
                /**
                 * Format: date-time
                 * @description Last time viewed (YYYY-MM-DD)
                 */
                lastViewed: string;
            }[];
        };
        ExportStatusResponse: {
            success: boolean;
            data: {
                /** @description Whether initial asset inventory is complete */
                inventoryComplete: boolean;
                /** @description Whether an export is currently running */
                enrichmentInProgress: boolean;
                /** @description Total number of assets in inventory */
                totalAssets: number;
                /** @description Number of fully enriched assets */
                enrichedAssets: number;
                /** @description Number of skeleton-only assets */
                skeletonAssets: number;
                /** @description Percentage of assets fully enriched */
                percentEnriched: number;
                /** @description Count of assets by type */
                assetsByType: {
                    [key: string]: number;
                };
                /**
                 * Format: date-time
                 * @description When the cache was last updated
                 */
                lastUpdated: string;
                nextSteps: {
                    /** @enum {string} */
                    phase: "inventory" | "enrichment" | "complete";
                    action: string;
                    description: string;
                };
                /** @description Current export state if an export is running */
                exportState?: {
                    /** @enum {string} */
                    status?: "idle" | "running" | "completed" | "error";
                    /** @description Current stage of export process */
                    currentStage?: string;
                    /** @description Unix timestamp when export started */
                    startedAt?: number;
                    /** @description Unix timestamp when export completed */
                    completedAt?: number | null;
                    totalAssets?: number;
                    enrichedAssets?: number;
                    failedAssets?: number;
                    assetProgress?: {
                        [key: string]: {
                            listed?: number;
                            enriched?: number;
                            failed?: number;
                        };
                    };
                } | null;
                /** @description Recent export log entries */
                logs: components["schemas"]["ExportLogEntry"][];
                /** @description Suggested milliseconds until next poll */
                nextPollInMs: number;
            };
        };
        ExportLogEntry: {
            /** @description Unix timestamp in milliseconds */
            ts: number;
            /** @description Log message */
            msg: string;
            /**
             * @default info
             * @enum {string}
             */
            level: "info" | "warn" | "error";
            /** @description Asset type context */
            assetType?: string;
            /** @description Asset ID context */
            assetId?: string;
            /** @description Number of API calls made in this operation */
            apiCalls?: number;
        };
        ExportSummaryResponse: {
            success: boolean;
            data: {
                totalAssets: number;
                exportedAssets: number;
                /** Format: date-time */
                lastExportDate: string | null;
                exportInProgress: boolean;
                /** @description Indicates if initial export is needed (no cache exists) */
                needsInitialExport?: boolean;
                /** @description Optional message providing export status context */
                message?: string;
                assetTypeCounts: {
                    dashboards?: number;
                    datasets?: number;
                    analyses?: number;
                    datasources?: number;
                    folders?: number;
                    users?: number;
                    groups?: number;
                };
                archivedAssetCounts?: {
                    dashboards?: number;
                    datasets?: number;
                    analyses?: number;
                    datasources?: number;
                    folders?: number;
                    users?: number;
                    groups?: number;
                    total?: number;
                };
                fieldStatistics: {
                    totalFields?: number;
                    totalCalculatedFields?: number;
                    totalUniqueFields?: number;
                } | null;
                /** @description Total storage size in bytes */
                totalSize?: number;
                cacheVersion?: string;
            };
        };
        ExportJobRequest: {
            /**
             * @description Force re-export of all assets even if cached
             * @default false
             */
            forceRefresh: boolean;
            /**
             * @description Rebuild all indexes from scratch
             * @default false
             */
            rebuildIndex: boolean;
            /**
             * @description Export ingestion data for SPICE datasets
             * @default false
             */
            exportIngestions: boolean;
            /** @description Specific asset types to export (all if not specified) */
            assetTypes?: components["schemas"]["AssetType"][];
            /**
             * @description Export all organizational assets (users, groups, folders) together
             * @default false
             */
            exportOrganizational: boolean;
            refreshOptions?: {
                /** @default true */
                definitions: boolean;
                /** @default true */
                permissions: boolean;
                /** @default true */
                tags: boolean;
            };
        };
        ExportJobResponse: {
            success: boolean;
            data: {
                /** @description Unique job identifier */
                jobId: string;
                status: components["schemas"]["JobStatus"];
                /** @description User-friendly status message */
                message: string;
            };
        };
        /**
         * @description Current status of the export job
         * @enum {string}
         */
        JobStatus: "queued" | "processing" | "completed" | "failed" | "stopping" | "stopped";
        ExportJobStatus: {
            success: boolean;
            data: {
                jobId: string;
                status: components["schemas"]["JobStatus"];
                /** @description Completion percentage */
                progress: number;
                /** @description Current operation or status message */
                message?: string;
                /** Format: date-time */
                startTime: string;
                /** Format: date-time */
                endTime?: string | null;
                /** @description Duration in milliseconds */
                duration?: number | null;
                stats?: {
                    totalAssets?: number;
                    processedAssets?: number;
                    failedAssets?: number;
                    apiCalls?: number;
                };
            };
        };
        ExportJobList: {
            success: boolean;
            data: {
                jobs: components["schemas"]["JobStatus"][];
            };
        };
        ExportJobLogs: {
            success: boolean;
            data: {
                jobId: string;
                logs: {
                    /** Format: date-time */
                    timestamp: string;
                    /** @enum {string} */
                    level: "info" | "warn" | "error";
                    message: string;
                    /** @description Additional context or metadata */
                    details?: Record<string, never>;
                }[];
            };
        };
        Ingestion: {
            /** @description Ingestion ID */
            id: string;
            /** @description Dataset ID */
            datasetId: string;
            /** @description Dataset name */
            datasetName?: string;
            /** @description Dataset ARN */
            datasetArn?: string;
            /** @description Type of datasource (S3, REDSHIFT, etc.) */
            datasourceType?: string;
            /** @description Ingestion ARN */
            ingestionArn?: string;
            /**
             * @description Ingestion status
             * @enum {string}
             */
            status: "RUNNING" | "COMPLETED" | "FAILED" | "CANCELLED" | "INITIALIZED" | "QUEUED";
            /**
             * Format: date-time
             * @description When the ingestion was created
             */
            createdTime: string;
            /** @description Time taken for ingestion in seconds */
            ingestionTimeInSeconds?: number;
            /** @description Size of data ingested in bytes */
            ingestionSizeInBytes?: number;
            /** @description Number of rows successfully ingested */
            rowsIngested?: number;
            /** @description Number of rows dropped during ingestion */
            rowsDropped?: number;
            /** @description Type of error if failed */
            errorType?: string;
            /** @description Error message if failed */
            errorMessage?: string;
            /**
             * @description Type of ingestion request
             * @enum {string}
             */
            requestType?: "INITIAL_INGESTION" | "INCREMENTAL_REFRESH" | "FULL_REFRESH" | "EDIT";
            queueInfo?: {
                /** @description ID of ingestion this is waiting on */
                waitingOnIngestion?: string;
                /** @description ID of queued ingestion */
                queuedIngestion?: string;
            };
        };
        IngestionMetadata: {
            /** @description Total number of ingestions */
            totalIngestions: number;
            /** @description Number of currently running ingestions */
            runningIngestions: number;
            /** @description Number of failed ingestions */
            failedIngestions: number;
            /**
             * Format: date-time
             * @description When the data was last updated
             */
            lastUpdated: string;
        };
        IngestionListResponse: {
            success: boolean;
            data: {
                ingestions: components["schemas"]["Ingestion"][];
                metadata: components["schemas"]["IngestionMetadata"];
                pagination: {
                    page: number;
                    pageSize: number;
                    totalItems: number;
                    totalPages: number;
                    hasMore: boolean;
                };
            };
        };
        TagWithCount: {
            /** @description Tag key */
            key: string;
            /** @description Tag value */
            value: string;
            /** @description Number of assets with this tag */
            count: number;
        };
        CatalogField: {
            fieldId: string;
            fieldName: string;
            dataType: string;
            description?: string;
            isCalculated: boolean;
            sourceAssetType: string;
            sourceAssetId: string;
            sourceAssetName: string;
            datasetId?: string;
            datasetName?: string;
            columnName?: string | null;
            expression?: string | null;
            expressions?: {
                expression?: string;
                sources?: {
                    assetType?: string;
                    assetId?: string;
                    assetName?: string;
                    dataType?: string;
                    lastUpdated?: string;
                }[];
            }[];
            dependencies?: string[];
            lastUpdated?: string;
            sources?: Record<string, never>[];
            variants?: Record<string, never>[];
            hasVariants?: boolean;
            usageCount?: number;
            analysisCount?: number;
            dashboardCount?: number;
        };
        DataCatalogResponse: {
            items?: components["schemas"]["CatalogField"][];
            pagination?: {
                page?: number;
                pageSize?: number;
                totalItems?: number;
                totalPages?: number;
                hasMore?: boolean;
            };
            summary?: {
                totalFields?: number;
                distinctFields?: number;
                totalCalculatedFields?: number;
                calculatedDatasetFields?: number;
                calculatedAnalysisFields?: number;
                visualFields?: number;
                fieldsByDataType?: {
                    [key: string]: number;
                };
                /** Format: date-time */
                lastUpdated?: string;
                processingTimeMs?: number;
            };
        };
        CatalogStats: {
            totalAssets?: number;
            assetsByType?: {
                [key: string]: number;
            };
            totalFields?: number;
            totalTags?: number;
            /** Format: date-time */
            lastUpdated?: string;
        };
        VisualFieldCatalogResponse: {
            visualFields?: {
                fieldId?: string;
                visualId?: string;
                visualName?: string;
                sheetId?: string;
                sheetName?: string;
                dashboardId?: string;
                dashboardName?: string;
                fieldName?: string;
                dataType?: string;
                isCalculated?: boolean;
                lastUpdated?: string;
            }[];
            summary?: {
                totalVisualFields?: number;
                totalVisuals?: number;
                totalSheets?: number;
                totalDashboards?: number;
                /** Format: date-time */
                lastUpdated?: string;
                processingTimeMs?: number;
            };
        };
        Error: {
            /** @description Error message */
            message: string;
            /** @description Error code */
            code?: string;
            /** @description Additional error details */
            details?: Record<string, never>;
        };
    };
    responses: {
        /** @description Bad request */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Unauthorized - Invalid or missing authentication */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Resource not found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Internal server error */
        InternalServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
